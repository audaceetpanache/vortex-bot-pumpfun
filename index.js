import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import { projectStore } from "./projectStore.js";

const app = express();
app.use(bodyParser.json());

const TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET || "SECRET";
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;
const WEBHOOK_PATH = `/webhook/${WEBHOOK_SECRET}`;

// --- Utility: Send message
async function sendMessage(chatId, text, reply_markup = null) {
  const payload = { chat_id: chatId, text, reply_markup };
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  });
}

// --- Start command
async function handleStart(chatId, firstName) {
  const text = `üåü Welcome to VORTEX!
üî• Where Things Happen! üî•
Available Features:
‚Ä¢ Launch pump.fun tokens
‚Ä¢ Create or import multiple wallets
‚Ä¢ Auto-fund wallets via SOL disperser
‚Ä¢ Bundle up to 24 wallets
‚Ä¢ CTO pump.fun/raydium tokens
‚Ä¢ Delayed bundle on pump.fun
‚Ä¢ Advanced swap manager with intervals, sell all functions.
‚Ä¢ Anti-MEV protection

Use /home to access all features
Use /settings for configuration`;

  const reply_markup = {
    inline_keyboard: [
      [
        { text: "üè† Home", callback_data: "home" },
        { text: "‚öôÔ∏è Settings", callback_data: "settings" },
      ],
    ],
  };

  await sendMessage(chatId, text, reply_markup);
}

// --- Home command
async function handleHome(chatId, firstName) {
  const text = `Yo ${firstName}! Nice to see you again! üî•
What's the move, boss? Wanna mint some fresh heat or clip profits from your existing bag? üí∏
Hit the buttons below and let's make it happen:`;

  const reply_markup = {
    inline_keyboard: [
      [{ text: "üìÇ Your Projects", callback_data: "list_projects" }],
      [{ text: "üöÄ Create new Project", callback_data: "create_project" }],
      [{ text: "üöÄ SPAM LAUNCH", callback_data: "unavailable" }],
      [{ text: "ü§ë BUMP BOT ü§ë", callback_data: "unavailable" }],
      [{ text: "üí∞ GET ALL SOL", callback_data: "unavailable" }],
      [
        { text: "üéÅ CLAIM DEV REWARDS", callback_data: "unavailable" },
        { text: "üîó Referrals", callback_data: "unavailable" },
      ],
      [{ text: "‚ùì Help", url: "https://deployonvortex.gitbook.io/documentation/" }],
      [{ text: "üë• Discord", url: "https://discord.com/invite/vortexdeployer" }],
    ],
  };

  await sendMessage(chatId, text, reply_markup);
}

// --- Settings command (placeholder)
async function handleSettings(chatId) {
  const text = `‚öôÔ∏è Settings
Current Settings:
‚Ä¢ Tip Amount: Disabled
‚Ä¢ Auto Tip: Enabled
‚Ä¢ Max Tip: 0.01 SOL
‚Ä¢ Priority Fee: 0.0005 SOL
‚Ä¢ Buy Slippage: 15%
‚Ä¢ Sell Slippage: 15%
‚Ä¢ Safe Settings: Enabled`;

  const reply_markup = {
    inline_keyboard: [
      [
        { text: "üí∞ TIP: ‚ùå", callback_data: "unavailable" },
        { text: "‚úÖ AUTO TIP", callback_data: "unavailable" },
        { text: "üìä MAX: 0.01 SOL", callback_data: "unavailable" },
      ],
      [
        { text: "‚ö°Ô∏è PRIO: 0.0005 SOL", callback_data: "unavailable" },
        { text: "üìà BUY SLIPPAGE: 15%", callback_data: "unavailable" },
        { text: "üìâ SELL SLIPPAGE: 15%", callback_data: "unavailable" },
      ],
      [{ text: "üîí UI SECURITY: üü¢", callback_data: "unavailable" }],
      [{ text: "‚¨ÖÔ∏è Back", callback_data: "home" }],
    ],
  };

  await sendMessage(chatId, text, reply_markup);
}

// --- Project menu
async function showProjectMenu(chatId, projectId) {
  const project = projectStore.getProject(chatId, projectId);
  if (!project) return;

  const text = `üéØ Project (${project.id})
Name: ${project.name || "‚ùå"}
Symbol: ${project.symbol || "‚ùå"}
Description: ${project.description || "‚ùå"}
Wallet: ${project.wallet || "‚ùå"}`;

  const reply_markup = {
    inline_keyboard: [
      [{ text: "‚úèÔ∏è Edit Name", callback_data: `edit_name_${project.id}` }],
      [{ text: "‚úèÔ∏è Edit Symbol", callback_data: `edit_symbol_${project.id}` }],
      [{ text: "‚úèÔ∏è Edit Description", callback_data: `edit_description_${project.id}` }],
      [{ text: "‚úèÔ∏è Edit Wallet", callback_data: `edit_wallet_${project.id}` }],
      [{ text: "üóëÔ∏è Delete Project", callback_data: `delete_project_${project.id}` }],
      [{ text: "‚¨ÖÔ∏è Back", callback_data: "list_projects" }],
    ],
  };

  await sendMessage(chatId, text, reply_markup);
}

// --- List projects
async function listProjects(chatId) {
  const projects = projectStore.getProjects(chatId);

  if (!projects || projects.length === 0) {
    await sendMessage(chatId, "üìÇ You have no projects yet. Create one!", {
      inline_keyboard: [[{ text: "üöÄ Create Project", callback_data: "create_project" }]],
    });
    return;
  }

  const buttons = projects.map((p) => [{ text: p.name, callback_data: `project_${p.id}` }]);
  buttons.push([{ text: "‚¨ÖÔ∏è Back", callback_data: "home" }]);

  await sendMessage(chatId, "üìÇ Your Projects:", { inline_keyboard: buttons });
}

// --- Webhook handler
app.post(WEBHOOK_PATH, async (req, res) => {
  const body = req.body;

  if (body.message) {
    const chatId = body.message.chat.id;
    const firstName = body.message.chat.first_name || "";

    if (body.message.text === "/start") {
      await handleStart(chatId, firstName);
    } else if (body.message.text === "/home") {
      await handleHome(chatId, firstName);
    } else if (body.message.text === "/settings") {
      await handleSettings(chatId);
    }
  } else if (body.callback_query) {
    const chatId = body.callback_query.message.chat.id;
    const firstName = body.callback_query.message.chat.first_name || "";
    const data = body.callback_query.data;

    if (data === "home") {
      await handleHome(chatId, firstName);
    } else if (data === "settings") {
      await handleSettings(chatId);
    } else if (data === "list_projects") {
      await listProjects(chatId);
    } else if (data === "create_project") {
      const newProj = projectStore.addProject(chatId, "New Project");
      await showProjectMenu(chatId, newProj.id);
    } else if (data.startsWith("project_")) {
      const projectId = parseInt(data.split("_")[1], 10);
      await showProjectMenu(chatId, projectId);
    } else if (data.startsWith("delete_project_")) {
      const projectId = parseInt(data.split("_")[2], 10);
      projectStore.deleteProject(chatId, projectId);
      await listProjects(chatId);
    } else if (data === "unavailable") {
      await sendMessage(chatId, "üöß This feature is not supported yet, working on it", {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è Back", callback_data: "home" }]],
      });
    }
  }

  res.sendStatus(200);
});

// --- Webhook setup
const PORT = process.env.PORT || 10000;
app.listen(PORT, async () => {
  console.log(`‚úÖ Serveur en ligne sur port ${PORT}`);

  const url = `https://${process.env.RENDER_EXTERNAL_HOSTNAME}${WEBHOOK_PATH}`;
  try {
    const resp = await fetch(`${TELEGRAM_API}/setWebhook`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ url }),
    });
    const data = await resp.json();
    console.log("‚úÖ Webhook configur√© :", data);
  } catch (err) {
    console.error("‚ùå Erreur setWebhook :", err.message);
  }
});
